name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install OpenVPN and sshpass
        run: sudo apt-get update && sudo apt-get install -y openvpn sshpass

      - name: Setup OpenVPN config
        run: |
          echo "${{ secrets.OVPN_CONFIG }}" > vpn.conf
        shell: bash

      - name: Connect to VPN
        run: sudo openvpn --config vpn.conf --daemon && sleep 15

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan 10.8.0.1 >> ~/.ssh/known_hosts

      - name: Test SSH connection with password
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "echo '‚úîÔ∏è SSH OK with password'"
      
      #Instala nestJs CLI en el server
      - name: Install nestJs CLI
        run: |
          npm install -g @nestjs/cli

      # Instala dependencias de producci√≥n y compila el proyecto localmente
      - name: Install prod dependencies and build
        run: |
          npm install --omit=dev
          npm run build

      # Empaqueta dist, package.json, package-lock.json para enviar al server
      - name: Prepare dist for deploy
        run: |
          tar czf deploy-dist.tar.gz dist package.json package-lock.json

      # Genera .env.production localmente y copia todo a /var/www/guiders-backend/ en el server
      - name: Copy dist and .env.production to server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo 'PORT=${{ secrets.PORT }}' > .env.production
          echo 'DATABASE_HOST=${{ secrets.DATABASE_HOST }}' >> .env.production
          echo 'DATABASE_PORT=${{ secrets.DATABASE_PORT }}' >> .env.production
          echo 'DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}' >> .env.production
          echo 'DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}' >> .env.production
          echo 'DATABASE=${{ secrets.DATABASE }}' >> .env.production
          echo 'APP_URL=${{ secrets.APP_URL }}' >> .env.production
          echo 'ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}' >> .env.production
          echo 'GLOBAL_TOKEN_SECRET=${{ secrets.GLOBAL_TOKEN_SECRET }}' >> .env.production
          echo 'ACCESS_TOKEN_EXPIRATION=${{ secrets.ACCESS_TOKEN_EXPIRATION }}' >> .env.production
          echo 'REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }}' >> .env.production
          echo 'REDIS_PORT=${{ secrets.REDIS_PORT }}' >> .env.production
          echo 'REDIS_URL=${{ secrets.REDIS_URL }}' >> .env.production
          echo 'MONGODB_HOST=localhost' >> .env.production
          echo 'MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }}' >> .env.production
          echo 'MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}' >> .env.production
          echo 'MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}' >> .env.production
          echo 'MONGODB_PORT=${{ secrets.MONGODB_PORT }}' >> .env.production

          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "mkdir -p /var/www/guiders-backend/"
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no deploy-dist.tar.gz .env.production ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/var/www/guiders-backend/

      # Copia docker-compose-prod.yml al servidor
      - name: Copy docker-compose-prod.yml to server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no docker-compose-prod.yml ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/var/www/guiders-backend/

      # Copia el script de test de MongoDB al servidor
      - name: Copy MongoDB test script to server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no bin/test-mongodb-connection.js bin/verify-mongodb-deploy.js bin/rollback-deploy.js bin/mongodb-deploy-manager.js ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/var/www/guiders-backend/

      # Crear backup antes del deploy
      - name: Create backup before deploy
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            echo 'üíæ Creando backup antes del deploy...' && \
            if [ -d /var/www/guiders-backend ]; then \
              rm -rf /var/www/guiders-backend-backup && \
              cp -r /var/www/guiders-backend /var/www/guiders-backend-backup && \
              echo '‚úÖ Backup creado en /var/www/guiders-backend-backup'; \
            else \
              echo '‚ÑπÔ∏è No existe directorio previo para hacer backup'; \
            fi \
          "

      # Descomprime y prepara entorno en el server
      - name: Unpack dist and install on server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            cd /var/www/guiders-backend/ && \
            tar xzf deploy-dist.tar.gz && \
            rm -rf node_modules && \
            npm install --omit=dev \
          "

      # Levanta la base de datos con docker-compose
      - name: Start database with docker-compose
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            cd /var/www/guiders-backend/ && \
            docker compose --env-file .env.production -f docker-compose-prod.yml up -d --remove-orphans \
          "

      # Esperar a que los servicios est√©n listos antes de ejecutar migraciones
      - name: Wait for databases to be ready
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            echo 'üîÑ Esperando a que las bases de datos est√©n listas...' && \
            for i in {1..30}; do \
              postgres_ready=false; \
              mongodb_ready=false; \
              \
              if docker exec postgres-prod pg_isready -U \$DATABASE_USERNAME >/dev/null 2>&1; then \
                postgres_ready=true; \
              fi; \
              \
              if docker exec mongodb-prod mongosh --host localhost --port 27017 --eval 'db.adminCommand(\"ping\")' >/dev/null 2>&1; then \
                mongodb_ready=true; \
              fi; \
              \
              echo \"Intento \$i/30: PostgreSQL=\$postgres_ready, MongoDB=\$mongodb_ready\"; \
              \
              if \$postgres_ready && \$mongodb_ready; then \
                echo '‚úÖ Todas las bases de datos est√°n listas!'; \
                break; \
              fi; \
              \
              sleep 3; \
            done \
          "

      # Test MongoDB connection usando el script de test
      - name: Test MongoDB connection
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            cd /var/www/guiders-backend/ && \
            echo 'üîç Probando conexi√≥n a MongoDB...' && \
            node mongodb-deploy-manager.js test \
          "

      # Ejecuta migraciones de TypeORM en el servidor antes de reiniciar la app
      - name: Run TypeORM migrations on server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            cd /var/www/guiders-backend/ && \
            NODE_ENV=production npx typeorm migration:run -d dist/src/data-source.js \
          "

      # Reinicia la app con pm2 del sistema
      - name: Restart app with pm2
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            cd /var/www/guiders-backend/ && \
            pm2 delete guiders-backend || true && \
            NODE_ENV=production pm2 start dist/src/main.js --name guiders-backend \
          "
      # dar permisos de ejecuci√≥n a /dist/tools/cli.js
      - name: Set execute permissions for cli.js
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            chmod +x /var/www/guiders-backend/dist/tools/cli.js \
          "

      # Verificar que todos los servicios est√©n funcionando
      - name: Verify deployment status
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            echo 'üîç Verificando estado del despliegue...' && \
            echo 'üìä Estado de PM2:' && \
            pm2 list | grep guiders-backend || echo 'App no encontrada en PM2' && \
            echo 'üìä Estado de Docker:' && \
            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep -E '(postgres-prod|redis-prod|mongodb-prod)' && \
            echo 'üîç Verificaci√≥n final de MongoDB:' && \
            node mongodb-deploy-manager.js full-check && \
            echo '‚úÖ Verificaci√≥n de despliegue completada' \
          "

      # Rollback autom√°tico en caso de fallo
      - name: Rollback on failure
        if: failure()
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "‚ùå Deploy fall√≥, iniciando rollback autom√°tico..."
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "\
            cd /var/www/guiders-backend/ && \
            echo 'üîÑ Ejecutando rollback autom√°tico...' && \
            node mongodb-deploy-manager.js rollback \
          "