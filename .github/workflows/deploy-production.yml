name: Deploy to Production (Simplified)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install OpenVPN and sshpass
        run: sudo apt-get update && sudo apt-get install -y openvpn sshpass

      - name: Setup OpenVPN config
        run: echo "${{ secrets.OVPN_CONFIG }}" > vpn.conf

      - name: Connect to VPN
        run: sudo openvpn --config vpn.conf --daemon && sleep 15

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan 10.8.0.1 >> ~/.ssh/known_hosts

      - name: Build and prepare deployment
        run: |
          # Instalar solo dependencias necesarias para el build
          npm ci --include=dev
          npm run build
          
          # Crear package.json optimizado para producción (sin sqlite3)
          node -e "
            const pkg = JSON.parse(require('fs').readFileSync('package.json'));
            // Remover sqlite3 de las dependencias ya que solo se usa en tests
            if (pkg.dependencies && pkg.dependencies.sqlite3) {
              delete pkg.dependencies.sqlite3;
            }
            require('fs').writeFileSync('package-prod.json', JSON.stringify(pkg, null, 2));
          "
          
          tar czf deploy-dist.tar.gz dist package-prod.json package-lock.json

      - name: Deploy to server
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "🚀 Iniciando deployment simplificado..."
          
          # Crear .env.production
          echo 'PORT=${{ secrets.PORT }}' > .env.production
          echo 'DATABASE_HOST=${{ secrets.DATABASE_HOST }}' >> .env.production
          echo 'DATABASE_PORT=${{ secrets.DATABASE_PORT }}' >> .env.production
          echo 'DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}' >> .env.production
          echo 'DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}' >> .env.production
          echo 'DATABASE=${{ secrets.DATABASE }}' >> .env.production
          echo 'APP_URL=${{ secrets.APP_URL }}' >> .env.production
          echo 'ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}' >> .env.production
          echo 'GLOBAL_TOKEN_SECRET=${{ secrets.GLOBAL_TOKEN_SECRET }}' >> .env.production
          echo 'ACCESS_TOKEN_EXPIRATION=${{ secrets.ACCESS_TOKEN_EXPIRATION }}' >> .env.production
          echo 'REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }}' >> .env.production
          echo 'REDIS_PORT=${{ secrets.REDIS_PORT }}' >> .env.production
          echo 'REDIS_URL=${{ secrets.REDIS_URL }}' >> .env.production
          echo 'MONGODB_HOST=localhost' >> .env.production
          echo 'MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}' >> .env.production
          echo 'MONGODB_PORT=${{ secrets.MONGODB_PORT }}' >> .env.production
          echo 'MONGODB_ROOT_USERNAME=${{ secrets.MONGODB_ROOT_USERNAME }}' >> .env.production
          echo 'MONGODB_ROOT_PASSWORD=${{ secrets.MONGODB_ROOT_PASSWORD }}' >> .env.production
          echo 'NODE_ENV=production' >> .env.production

          # Subir archivos al servidor
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "mkdir -p /var/www/guiders-backend/"
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no deploy-dist.tar.gz .env.production docker-compose-prod.yml ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/var/www/guiders-backend/

          # Copiar scripts necesarios
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} "mkdir -p /var/www/guiders-backend/scripts/"
          sshpass -p "$SSH_PASSWORD" scp -o StrictHostKeyChecking=no scripts/mongo-init.js bin/test-mongodb-connection.js ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/var/www/guiders-backend/

      - name: Deploy and start services
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} '
            cd /var/www/guiders-backend/
            
            echo "📦 Descomprimiendo aplicación..."
            tar xzf deploy-dist.tar.gz
            
            # Usar el package.json optimizado sin sqlite3
            if [ -f package-prod.json ]; then
              mv package-prod.json package.json
              echo "✅ Usando package.json optimizado para producción"
            fi
            
            rm -rf node_modules
            npm install --omit=dev
            
            echo "🐳 Iniciando servicios de base de datos..."
            docker compose --env-file .env.production -f docker-compose-prod.yml up -d --remove-orphans
            
            echo "⏳ Esperando que las bases de datos estén listas (60 segundos máximo)..."
            for i in {1..12}; do
              echo "  Intento $i/12..."
              
              # Verificar todos los servicios en paralelo
              postgres_ok=$(docker inspect --format="{{.State.Health.Status}}" postgres-prod 2>/dev/null | grep -c "healthy" || echo "0")
              mongodb_ok=$(docker inspect --format="{{.State.Health.Status}}" mongodb-prod 2>/dev/null | grep -c "healthy" || echo "0")
              redis_ok=$(docker inspect --format="{{.State.Health.Status}}" redis-prod 2>/dev/null | grep -c "healthy" || echo "0")
              
              if [[ $postgres_ok -eq 1 && $mongodb_ok -eq 1 && $redis_ok -eq 1 ]]; then
                echo "  ✅ Todas las bases de datos están listas!"
                break
              fi
              
              if [[ $i -eq 12 ]]; then
                echo "  ❌ Timeout esperando bases de datos"
                docker ps
                exit 1
              fi
              
              sleep 5
            done
            
            echo "🔄 Ejecutando migraciones..."
            NODE_ENV=production npx typeorm migration:run -d dist/src/data-source.js
            
            echo "🚀 Reiniciando aplicación..."
            pm2 delete guiders-backend 2>/dev/null || true
            NODE_ENV=production pm2 start dist/src/main.js --name guiders-backend
            
            echo "✅ Deployment completado!"
            echo "📊 Estado de servicios:"
            pm2 list | grep guiders-backend
            docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(postgres-prod|mongodb-prod|redis-prod)"
          '

      - name: Verify deployment
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          echo "🔍 Verificando deployment..."
          
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }} '
            cd /var/www/guiders-backend/
            
            echo "🔍 Probando conexión a MongoDB..."
            NODE_ENV=production node test-mongodb-connection.js
            
            echo "📊 Estado final:"
            pm2 list
            docker ps
            
            echo "✅ ¡Deployment verificado exitosamente!"
          '
