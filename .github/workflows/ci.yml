name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job para verificar lint y formato
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check Prettier formatting
        run: npm run format -- --check

  # Job para compilar el proyecto
  build:
    name: Build Project
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  # Job para tests unitarios
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  # Job para tests de integración
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: guiders_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment variables
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "DATABASE_URL=******postgres:5432/guiders_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://redis:6379" >> $GITHUB_ENV
          echo "TEST_DATABASE_HOST=postgres" >> $GITHUB_ENV
          echo "TEST_DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "TEST_DATABASE_USERNAME=test" >> $GITHUB_ENV
          echo "TEST_DATABASE_PASSWORD=test" >> $GITHUB_ENV
          echo "TEST_DATABASE=guiders_test" >> $GITHUB_ENV
      
      - name: Run integration tests
        run: npm run test:int
        env:
          JEST_TIMEOUT: 30000
      
      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage
          path: coverage/
          retention-days: 7

  # Job para tests e2e
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: guiders_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Setup test environment variables
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "DATABASE_URL=******postgres:5432/guiders_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://redis:6379" >> $GITHUB_ENV
          echo "TEST_DATABASE_HOST=postgres" >> $GITHUB_ENV
          echo "TEST_DATABASE_PORT=5432" >> $GITHUB_ENV
          echo "TEST_DATABASE_USERNAME=test" >> $GITHUB_ENV
          echo "TEST_DATABASE_PASSWORD=test" >> $GITHUB_ENV
          echo "TEST_DATABASE=guiders_test" >> $GITHUB_ENV
      
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          JEST_TIMEOUT: 30000

  # Job final para verificar que todo está OK
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit, test-integration, test-e2e]
    if: success()
    
    steps:
      - name: Success message
        run: |
          echo "✅ Todos los checks de CI han pasado correctamente"
          echo "✅ Lint: OK"
          echo "✅ Build: OK" 
          echo "✅ Tests unitarios: OK"
          echo "✅ Tests de integración: OK"
          echo "✅ Tests E2E: OK"