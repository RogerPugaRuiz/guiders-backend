openapi: 3.1.0
info:
  title: API Guiders Backend
  description: |
    Documentación completa de la API del backend de Guiders.
    
    Esta API sigue una arquitectura basada en Domain-Driven Design (DDD) y 
    Command Query Responsibility Segregation (CQRS), implementada sobre NestJS v11.
    
    ## Arquitectura
    El sistema está organizado en diferentes contextos de negocio:
    - **auth**: Autenticación de usuarios y visitantes
    - **company**: Gestión de compañías
    - **conversations**: Sistema de chat y mensajería
    - **visitors**: Gestión de visitantes
    - **tracking**: Seguimiento de intenciones y comportamiento
    - **real-time**: Comunicación en tiempo real vía WebSockets
    
    ## Autenticación
    La mayoría de endpoints requieren autenticación vía Bearer tokens JWT.
    
  version: 1.0.0
  contact:
    name: Guiders Backend Team
  license:
    name: UNLICENSED

servers:
  - url: http://localhost:3000
    description: Desarrollo local
  - url: https://api.guiders.dev
    description: Servidor de desarrollo
  - url: https://api.guiders.com
    description: Servidor de producción

paths:
  # Root endpoints
  /:
    get:
      tags:
        - General
      summary: Endpoint raíz
      description: Endpoint básico de bienvenida
      responses:
        '200':
          description: Mensaje de bienvenida
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World!"

  /health:
    head:
      tags:
        - General
      summary: Health check
      description: Verificación de estado del servidor
      responses:
        '200':
          description: Servidor funcionando correctamente

  # Auth User endpoints
  /user/auth/login:
    post:
      tags:
        - Autenticación de Usuarios
      summary: Iniciar sesión de usuario
      description: Verifica las credenciales y devuelve tokens de acceso y actualización
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Usuario autenticado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/auth/register:
    post:
      tags:
        - Autenticación de Usuarios
      summary: Registrar un nuevo usuario
      description: Crea un nuevo usuario en el sistema con el rol especificado (requiere rol admin)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Usuario registrado correctamente
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: El usuario ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/auth/refresh:
    post:
      tags:
        - Autenticación de Usuarios
      summary: Renovar token de acceso
      description: Utiliza un token de actualización para obtener un nuevo token de acceso
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token renovado correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Token de actualización inválido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/auth/logout:
    post:
      tags:
        - Autenticación de Usuarios
      summary: Cerrar sesión
      description: Cierra la sesión del usuario y revoca sus tokens
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Sesión cerrada correctamente
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/auth/validate:
    get:
      tags:
        - Autenticación de Usuarios
      summary: Validar token de acceso
      description: Verifica que el token de acceso sea válido
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Token válido
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Token inválido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/auth/accept-invite:
    post:
      tags:
        - Autenticación de Usuarios
      summary: Aceptar invitación
      description: Acepta una invitación para unirse a una compañía y establece la contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcceptInviteRequest'
      responses:
        '200':
          description: Invitación aceptada correctamente
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Token de invitación inválido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/auth/company-users:
    get:
      tags:
        - Autenticación de Usuarios
      summary: Listar usuarios de la compañía
      description: Devuelve los usuarios asociados a la compañía del token JWT (requiere rol admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de usuarios
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Auth Visitor endpoints
  /pixel/token:
    post:
      tags:
        - Autenticación de Visitantes
      summary: Obtener token para visitante
      description: Genera tokens de acceso para visitantes ya registrados
      parameters:
        - name: Origin
          in: header
          required: true
          schema:
            type: string
          description: Origen de la petición
        - name: Referer
          in: header
          required: true
          schema:
            type: string
          description: URL de referencia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client:
                  type: string
                  description: ID del cliente
                  example: "12345"
              required:
                - client
      responses:
        '200':
          description: Tokens generados correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorTokenResponse'
        '400':
          description: Error en headers o parámetros
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cliente o visitante no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /pixel/register:
    post:
      tags:
        - Autenticación de Visitantes
      summary: Registrar visitante
      description: Registra un nuevo visitante y devuelve tokens de acceso
      parameters:
        - name: Origin
          in: header
          required: true
          schema:
            type: string
          description: Origen de la petición
        - name: Referer
          in: header
          required: true
          schema:
            type: string
          description: URL de referencia
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisitorRegisterRequest'
      responses:
        '200':
          description: Visitante registrado y tokens generados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorTokenResponse'
        '400':
          description: Error de validación o headers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: API Key no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /pixel/token/refresh:
    post:
      tags:
        - Autenticación de Visitantes
      summary: Renovar token de visitante
      description: Renueva el token de acceso de un visitante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: Token de renovación
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - refresh_token
      responses:
        '200':
          description: Token renovado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: Nuevo token de acceso
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Token de renovación inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # API Keys endpoints
  /api-keys/create:
    post:
      tags:
        - API Keys
      summary: Crear nueva API Key
      description: Crea una nueva API Key para un dominio y compañía específicos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain:
                  type: string
                  description: Dominio para el cual se crea la API Key
                  example: "example.com"
                companyId:
                  type: string
                  description: ID de la compañía
                  example: "company-uuid-123"
              required:
                - domain
                - companyId
      responses:
        '200':
          description: API Key creada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                    description: La API Key generada
                    example: "sk_live_123abc..."
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # JWKS endpoint
  /jwks:
    get:
      tags:
        - JWKS
      summary: Obtener claves públicas JWKS
      description: Devuelve las claves públicas para verificar tokens JWT
      responses:
        '200':
          description: Claves JWKS obtenidas correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          description: Tipo de clave
                        use:
                          type: string
                          description: Uso de la clave
                        kid:
                          type: string
                          description: ID de la clave
                        n:
                          type: string
                          description: Módulo (para RSA)
                        e:
                          type: string
                          description: Exponente (para RSA)
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Visitor endpoints
  /visitor/{visitorId}:
    get:
      tags:
        - Visitantes
      summary: Obtener datos del visitante por ID
      description: Obtiene los datos del visitante a partir del ID (requiere rol commercial)
      security:
        - bearerAuth: []
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      responses:
        '200':
          description: Datos del visitante obtenidos correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Visitante no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /visitor/{visitorId}/current-page:
    put:
      tags:
        - Visitantes
      summary: Actualizar página actual del visitante
      description: Actualiza la página actual que está visitando el usuario (requiere rol visitor)
      security:
        - bearerAuth: []
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPage:
                  type: string
                  description: URL de la página actual
                  example: "https://example.com/products"
              required:
                - currentPage
      responses:
        '200':
          description: Página actual actualizada correctamente
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Visitante no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /visitor/{visitorId}/email:
    put:
      tags:
        - Visitantes
      summary: Actualizar email del visitante
      description: Actualiza el correo electrónico del visitante (requiere rol commercial)
      security:
        - bearerAuth: []
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: Nuevo correo electrónico
                  example: "visitor@example.com"
              required:
                - email
      responses:
        '200':
          description: Email actualizado correctamente
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Visitante no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /visitor/{visitorId}/name:
    put:
      tags:
        - Visitantes
      summary: Actualizar nombre del visitante
      description: Actualiza el nombre del visitante (requiere rol commercial)
      security:
        - bearerAuth: []
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Nuevo nombre del visitante
                  example: "Juan Pérez"
              required:
                - name
      responses:
        '200':
          description: Nombre actualizado correctamente
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Visitante no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /visitor/{visitorId}/tel:
    put:
      tags:
        - Visitantes
      summary: Actualizar teléfono del visitante
      description: Actualiza el número de teléfono del visitante (requiere rol commercial)
      security:
        - bearerAuth: []
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tel:
                  type: string
                  description: Nuevo número de teléfono
                  example: "+34 666 123 456"
              required:
                - tel
      responses:
        '200':
          description: Teléfono actualizado correctamente
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Visitante no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Chat endpoints
  /chats:
    get:
      tags:
        - Conversaciones
      summary: Obtener lista de chats del comercial
      description: Devuelve la lista de chats asignados al comercial autenticado con filtros opcionales y paginación por cursor (requiere rol commercial)
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          description: Número máximo de chats a devolver
        - name: include
          in: query
          required: false
          schema:
            type: string
          description: Campos adicionales a incluir separados por comas
          example: "lastMessage,timestamp"
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor para paginación (base64 encoded)
      responses:
        '200':
          description: Lista de chats obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /chat/{chatId}:
    get:
      tags:
        - Conversaciones
      summary: Obtener chat por ID
      description: Devuelve los detalles de un chat específico
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
          description: ID único del chat
      responses:
        '200':
          description: Chat obtenido correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Chat no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Conversaciones
      summary: Iniciar un chat
      description: Permite a un visitante iniciar una conversación en un chat específico (requiere rol visitor)
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
          description: ID único del chat a iniciar
      responses:
        '200':
          description: Chat iniciado correctamente
          content:
            application/json:
              schema:
                type: object
                description: Respuesta del inicio de chat
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Chat no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /chat/{chatId}/messages:
    get:
      tags:
        - Conversaciones
      summary: Obtener mensajes del chat
      description: Devuelve los mensajes de un chat con paginación por cursor (requiere rol visitor o commercial)
      security:
        - bearerAuth: []
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: string
          description: ID único del chat
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
          description: Número máximo de mensajes a devolver
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor para paginación (base64 encoded)
      responses:
        '200':
          description: Mensajes obtenidos correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
        '204':
          description: No hay más mensajes disponibles
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Tracking endpoints
  /tracking/intent/{visitorId}:
    get:
      tags:
        - Seguimiento
      summary: Obtener intención detallada del visitante
      description: Devuelve la intención detallada y tags de comportamiento de un visitante
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      responses:
        '200':
          description: Intención detallada obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorIntentDetailedResponse'
        '404':
          description: No se encontró intención para el visitante
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tracking/intent-tags/{visitorId}:
    get:
      tags:
        - Seguimiento
      summary: Obtener tags de intención del visitante
      description: Devuelve únicamente los tags de comportamiento de un visitante
      parameters:
        - name: visitorId
          in: path
          required: true
          schema:
            type: string
          description: ID único del visitante
      responses:
        '200':
          description: Tags de intención obtenidos correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      type: string
                    description: Lista de tags de comportamiento
                    example: ["interested_in_product", "high_engagement", "price_sensitive"]
        '404':
          description: No se encontró intención para el visitante
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # OpenSearch endpoints (testing)
  /open-search/{index}:
    post:
      tags:
        - Testing
      summary: Crear documento en OpenSearch
      description: Endpoint de prueba para crear documentos en OpenSearch
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: string
          description: Nombre del índice de OpenSearch
      responses:
        '200':
          description: Documento creado correctamente
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      tags:
        - Testing
      summary: Buscar en OpenSearch
      description: Endpoint de prueba para realizar búsquedas en OpenSearch
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: string
          description: Nombre del índice de OpenSearch
      responses:
        '200':
          description: Búsqueda realizada correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT Bearer. Formato 'Bearer <token>'

  schemas:
    # Error schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Mensaje de error
        message:
          type: string
          description: Descripción detallada del error
        timestamp:
          type: string
          format: date-time
          description: Timestamp del error
      required:
        - error

    # Auth User schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: El correo electrónico del usuario
          example: "usuario@ejemplo.com"
        password:
          type: string
          description: La contraseña del usuario
          example: "Password123!"
      required:
        - email
        - password

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: El correo electrónico del usuario
          example: "usuario@ejemplo.com"
        name:
          type: string
          description: El nombre del usuario (opcional)
          example: "Juan Pérez"
        password:
          type: string
          description: La contraseña del usuario (mínimo 8 caracteres, una mayúscula, una minúscula, un número y un carácter especial)
          example: "Password123!"
        roles:
          type: array
          items:
            type: string
          description: Roles asignados al usuario (opcional, por defecto "commercial")
          example: ["commercial"]
      required:
        - email
        - password

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token de acceso JWT
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: Token de actualización JWT para renovar el token de acceso
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - access_token
        - refresh_token

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: Token de actualización para renovar el token de acceso
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - refresh_token

    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Nuevo token de acceso JWT
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - access_token

    AcceptInviteRequest:
      type: object
      properties:
        token:
          type: string
          description: Token de invitación recibido por correo electrónico
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        password:
          type: string
          description: La contraseña del usuario (mínimo 8 caracteres, una mayúscula, una minúscula, un número y un carácter especial)
          example: "Password123!"
      required:
        - token
        - password

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserAccount'
      required:
        - users

    UserAccount:
      type: object
      properties:
        id:
          type: string
          description: ID único del usuario
        email:
          type: string
          format: email
          description: Correo electrónico del usuario
        roles:
          type: array
          items:
            type: string
          description: Roles del usuario
        companyId:
          type: string
          description: ID de la compañía
        isActive:
          type: boolean
          description: Estado activo/inactivo del usuario

    # Auth Visitor schemas
    VisitorRegisterRequest:
      type: object
      properties:
        apiKey:
          type: string
          description: API Key de la compañía
          example: "sk_live_123abc..."
        client:
          type: string
          description: ID del cliente
          example: "12345"
        userAgent:
          type: string
          description: User-Agent del navegador
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
      required:
        - apiKey
        - client
        - userAgent

    VisitorTokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Token de acceso para el visitante
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: Token de renovación para el visitante
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - access_token
        - refresh_token

    # Visitor schemas
    VisitorResponse:
      type: object
      properties:
        id:
          type: string
          description: ID único del visitante
        name:
          type: string
          nullable: true
          description: Nombre del visitante
        email:
          type: string
          format: email
          nullable: true
          description: Correo electrónico del visitante
        tel:
          type: string
          nullable: true
          description: Teléfono del visitante
        tags:
          type: array
          items:
            type: string
          description: Etiquetas asociadas al visitante
        notes:
          type: array
          items:
            type: string
          description: Notas asociadas al visitante
        currentPage:
          type: string
          nullable: true
          description: Página actual del visitante

    # Chat schemas
    ChatListResponse:
      type: object
      properties:
        chats:
          type: array
          items:
            $ref: '#/components/schemas/Chat'
        nextCursor:
          type: string
          nullable: true
          description: Cursor para la siguiente página
        hasMore:
          type: boolean
          description: Indica si hay más chats disponibles

    Chat:
      type: object
      properties:
        id:
          type: string
          description: ID único del chat
        participantIds:
          type: array
          items:
            type: string
          description: IDs de los participantes
        lastMessage:
          type: string
          nullable: true
          description: Último mensaje del chat
        lastMessageAt:
          type: string
          format: date-time
          nullable: true
          description: Fecha del último mensaje
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación

    ChatResponse:
      type: object
      properties:
        id:
          type: string
          description: ID único del chat
        participantIds:
          type: array
          items:
            type: string
          description: IDs de los participantes
        status:
          type: string
          description: Estado del chat
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación
        updatedAt:
          type: string
          format: date-time
          description: Fecha de última actualización

    MessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        nextCursor:
          type: string
          nullable: true
          description: Cursor para la siguiente página
        hasMore:
          type: boolean
          description: Indica si hay más mensajes disponibles

    Message:
      type: object
      properties:
        id:
          type: string
          description: ID único del mensaje
        senderId:
          type: string
          description: ID del remitente
        content:
          type: string
          description: Contenido del mensaje
        timestamp:
          type: string
          format: date-time
          description: Timestamp del mensaje
        type:
          type: string
          description: Tipo de mensaje

    # Tracking schemas
    VisitorIntentDetailedResponse:
      type: object
      properties:
        visitorId:
          type: string
          description: ID del visitante
        intent:
          $ref: '#/components/schemas/VisitorIntent'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/IntentTag'
          description: Tags de comportamiento
        navigationPath:
          type: array
          items:
            $ref: '#/components/schemas/NavigationPath'
          description: Ruta de navegación

    VisitorIntent:
      type: object
      properties:
        score:
          type: number
          format: float
          description: Puntuación de intención
        category:
          type: string
          description: Categoría de intención
        confidence:
          type: number
          format: float
          description: Nivel de confianza

    IntentTag:
      type: object
      properties:
        value:
          type: string
          description: Valor del tag
        weight:
          type: number
          format: float
          description: Peso del tag
        category:
          type: string
          description: Categoría del tag

    NavigationPath:
      type: object
      properties:
        url:
          type: string
          description: URL visitada
        timestamp:
          type: string
          format: date-time
          description: Timestamp de la visita
        timeSpent:
          type: number
          description: Tiempo pasado en la página (segundos)

  responses:
    # Common error responses
    ValidationError:
      description: Error de validación en los datos de entrada
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Validation failed"
            message: "Invalid email format"

    Unauthorized:
      description: No autorizado - token JWT inválido o ausente
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Unauthorized"
            message: "Invalid or missing JWT token"

    Forbidden:
      description: Acceso denegado - permisos insuficientes
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Forbidden"
            message: "Insufficient permissions"

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal Server Error"
            message: "An unexpected error occurred"

tags:
  - name: General
    description: Endpoints generales del sistema
  - name: Autenticación de Usuarios
    description: Endpoints para autenticación y gestión de usuarios comerciales
  - name: Autenticación de Visitantes
    description: Endpoints para autenticación de visitantes (pixel tracking)
  - name: API Keys
    description: Gestión de API Keys para compañías
  - name: JWKS
    description: JSON Web Key Set para verificación de tokens
  - name: Visitantes
    description: Gestión y actualización de datos de visitantes
  - name: Conversaciones
    description: Sistema de chat y mensajería en tiempo real
  - name: Seguimiento
    description: Tracking de comportamiento e intenciones de visitantes
  - name: Testing
    description: Endpoints de prueba y desarrollo

externalDocs:
  description: Documentación técnica completa
  url: https://github.com/RogerPugaRuiz/guiders-backend/blob/main/docs/technical-architecture.md