@startuml Diagrama-secuencia
!theme amiga
actor "Usuario" as User
note right of User: Roles: Visitor, Commercial
participant "RealTime" as RT
participant "TokenVerifyService" as TV
participant "CommandBus" as CB
participant "QueryBus" as QB
participant "FindCommercialChatsQueryHandler" as FCC
participant "SendMessageToVisitorCommandHandler" as SMV
participant "SendMessageToCommercialCommandHandler" as SMC
participant "ConnectUserCommandHandler" as CH
participant "ConnectionRepository" as ConR
participant "EventBus" as EB
participant "SaveMessageOnRealTimeMessageSendEvent" as SM
participant "RegisterChatOnVisitorConnection" as RC
participant "ChatRepository" as CR
participant "MessageRepository" as MR

User -> RT: Conexión establecida
activate RT

RT -> TV: verifyToken(token)
activate TV
alt Error en token
  TV --> RT: Error
  RT --> User: return error
else Token válido
  TV -> RT: TokenPayload
  deactivate TV

  RT -> CB: execute(ConnectUserCommand)
  activate CB
  CB -> CH: execute(ConnectUserCommand)
  activate CH
  CH -> ConR: findOne(criteria)
  activate ConR
  ConR --> CH: Conexión encontrada
  CH -> ConR: save(Connection)
  ConR --> CH: void
  deactivate ConR
  CH -> EB: emit(ConnectedEvent)
  activate EB
  EB -> RC: handle(ConnectedEvent)
  activate RC
  
  CH --> CB: void
  deactivate CH
  CB --> RT: void
  deactivate CB
  RT -> RT: asociar los usuarios por role
  RT --> User: 
  deactivate RT
  RC -> RC: validar role
  alt Usuario Comercial
    RC --> EB: void
  else Usuario Visitante
    RC -> CR: findOne(criteria)
    activate CR
    alt Chat ya existe
      CR --> RC: Chat encontrado
      RC --> EB: void
    else Chat no existe
      CR --> RC: Chat no encontrado
      RC -> CR: save(Chat)
      RC --> EB: void
    end
    deactivate CR
  end
  deactivate EB
  deactivate RC
  
  User -> RT: obtener los chats
  activate RT
  RT -> RT: validateRole
  alt Es un Visitante
    RT --> User: error

  else Es un Comercial
    RT -> QB: execute(FindCommercialChatsQuery)
    activate QB
    QB -> FCC: execute(FindCommercialChatsQuery)
    activate FCC
    FCC ->CR: find(criteria)
    activate CR
    CR --> FCC: Chat[]
    deactivate CR
    FCC --> QB: FindCommercialChatsQueryResult
    deactivate FCC
    QB --> RT: FindCommercialChatsQueryResult
    deactivate QB
    RT --> User: Lista de chats
  end
  deactivate RT

  User -> RT: send message to visitor
  activate RT
  RT -> CB: execute(SendMessageToVisitorCommand)
  activate CB
  CB -> SMV: execute(SendMessageToVisitorCommand)
  activate SMV

  ' Búsqueda del ConnectionUser para el sender
  SMV -> ConR: findOne(sender criteria)
  activate ConR
  ConR --> SMV: resultSender
  deactivate ConR

  ' Búsqueda del ConnectionUser para el receiver
  SMV -> ConR: findOne(receiver criteria)
  activate ConR
  ConR --> SMV: resultReceiver
  deactivate ConR

  alt Ambos encontrados
    SMV -> EB: emit(RealTimeMessageSendEvent)
    activate EB
    EB -> SM: handle(RealTimeMessageSendEvent)
    activate SM
    SM -> CR: findOne(criteria)
    activate CR
    alt Chat no encontrado
      CR --> SM: Chat no encontrado
      SM -> CR: save(Chat)
      SM --> EB: void
    else Chat encontrado
      CR --> SM: Chat encontrado
      SM -> SM: updateChat(Chat)
      SM -> CR: save(Chat)
      SM -> MR: save(Message)
      activate MR
      MR --> SM: void
      deactivate MR
      SM --> EB: void
    end
    deactivate CR
    deactivate SM
    deactivate EB
    SMV -> CB: ok(void) \n(Se emite mensaje y se commitea el evento)
  else Sender no encontrado
    SMV -> CB: err("Sender not found")
  else Receiver no encontrado
    SMV -> CB: err("Receiver not found")
  end

  deactivate SMV
  CB -> RT: respuesta (éxito o err(SendMessageToVisitorError))
  deactivate CB
  RT -> User: response message
  deactivate RT
  User -> RT: send message to commercial
  activate RT
  RT -> CB: execute(SendMessageToCommercialCommand)
  activate CB
  CB -> SMC: execute(SendMessageToCommercialCommand)
  activate SMC
  ' Búsqueda del ConnectionUser para el sender
  SMC -> ConR: findOne(sender criteria)
  activate ConR
  ConR --> SMC: resultSender
  deactivate ConR

  alt Ambos encontrados
    SMC -> EB: emit(RealTimeMessageSendEvent)
    EB -> SM: handle(RealTimeMessageSendEvent)
    activate EB
    activate SM
    SM -> CR: findOne(criteria)
    activate CR
    alt Chat no encontrado
      CR --> SM: Chat no encontrado
      SM -> CR: save(Chat)
      SM --> EB: void
    else Chat encontrado
      CR --> SM: Chat encontrado
      SM -> SM: updateChat(Chat)
      SM -> CR: save(Chat)
      SM -> MR: save(Message)
      activate MR
      MR --> SM: void
      deactivate MR
      SM --> EB: void
    end
    deactivate CR
    deactivate SM
    deactivate EB
    SM -> EB: void
    deactivate EB
    SMC -> CB: ok(void) \n(Se emite mensaje a commercial y se commitea el evento)
  else Receiver no encontrado
    SMC -> CB: ok(void) \n(Se emite mensaje a todos los comerciales y se commitea el evento)
  else Sender no encontrado
    SMC -> CB: err("Sender not found")
  end
  deactivate SMC
  CB -> RT: respuesta (éxito o err(SendMessageToCommercialError))
  deactivate CB
  RT -> User: response message
  deactivate RT
  
end
@enduml
