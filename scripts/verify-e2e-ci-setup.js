#!/usr/bin/env node

/**
 * Script de verificaci√≥n para configuraci√≥n E2E en CI
 * Verifica que todos los archivos y configuraciones est√©n presentes
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configuraci√≥n E2E para CI...\n');

const checks = [
  {
    name: 'Configuraci√≥n Jest E2E CI',
    path: './test/jest-e2e.ci.json',
    required: true
  },
  {
    name: 'Setup Jest E2E CI',
    path: './test/jest-e2e.ci.setup.ts',
    required: true
  },
  {
    name: 'Helper MongoDB Test',
    path: './test/helpers/mongo-test.helper.ts',
    required: true
  },
  {
    name: 'Workflow GitHub Actions',
    path: './.github/workflows/deploy-staging.yml',
    required: true
  }
];

let allGood = true;

checks.forEach(check => {
  const exists = fs.existsSync(check.path);
  const status = exists ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${check.name}: ${check.path}`);
  
  if (check.required && !exists) {
    allGood = false;
  }
});

console.log('\nüìã Verificando package.json scripts...');
try {
  const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
  const hasE2ECI = packageJson.scripts && packageJson.scripts['test:e2e:ci'];
  console.log(`${hasE2ECI ? '‚úÖ' : '‚ùå'} Script test:e2e:ci: ${hasE2ECI ? 'Presente' : 'Faltante'}`);
  
  if (!hasE2ECI) allGood = false;
} catch (error) {
  console.log('‚ùå Error leyendo package.json:', error.message);
  allGood = false;
}

console.log('\nüìã Verificando contenido de archivos clave...');

// Verificar jest-e2e.ci.json
try {
  const ciConfig = JSON.parse(fs.readFileSync('./test/jest-e2e.ci.json', 'utf8'));
  const hasSetupFile = ciConfig.setupFilesAfterEnv && 
    ciConfig.setupFilesAfterEnv.some(file => file.includes('jest-e2e.ci.setup.ts'));
  console.log(`${hasSetupFile ? '‚úÖ' : '‚ùå'} Jest CI config usa setup correcto`);
} catch (error) {
  console.log('‚ùå Error leyendo jest-e2e.ci.json:', error.message);
  allGood = false;
}

// Verificar GitHub Actions workflow
try {
  const workflow = fs.readFileSync('./.github/workflows/deploy-staging.yml', 'utf8');
  const hasMongoService = workflow.includes('mongodb:') && workflow.includes('27017:27017');
  const hasE2ECommand = workflow.includes('npm run test:e2e:ci');
  const hasEnvVars = workflow.includes('TEST_MONGODB_HOST') && workflow.includes('TEST_MONGODB_PORT');
  
  console.log(`${hasMongoService ? '‚úÖ' : '‚ùå'} Workflow tiene servicio MongoDB`);
  console.log(`${hasE2ECommand ? '‚úÖ' : '‚ùå'} Workflow ejecuta test:e2e:ci`);
  console.log(`${hasEnvVars ? '‚úÖ' : '‚ùå'} Workflow define variables de MongoDB`);
  
  if (!hasMongoService || !hasE2ECommand || !hasEnvVars) {
    allGood = false;
  }
} catch (error) {
  console.log('‚ùå Error leyendo workflow:', error.message);
  allGood = false;
}

console.log('\n' + '='.repeat(50));
if (allGood) {
  console.log('üéâ ¬°Configuraci√≥n E2E para CI est√° completa!');
  console.log('‚úÖ Todos los archivos y configuraciones est√°n presentes');
  console.log('üöÄ Los tests E2E deber√≠an funcionar en GitHub Actions');
} else {
  console.log('‚ö†Ô∏è  Hay problemas en la configuraci√≥n E2E para CI');
  console.log('üîß Revisa los errores listados arriba');
  process.exit(1);
}