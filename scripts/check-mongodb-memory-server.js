#!/usr/bin/env node

/**
 * Script para verificar si MongoDB Memory Server funciona correctamente
 * Se usa en CI/CD para detectar problemas antes de ejecutar los tests
 */

const { MongoMemoryServer } = require('mongodb-memory-server');

async function checkMongoMemoryServer() {
  console.log('üîç Verificando MongoDB Memory Server...');
  
  const isCI = process.env.CI === 'true' || process.env.NODE_ENV === 'test';
  console.log(`üèóÔ∏è Entorno: ${isCI ? 'CI/CD' : 'desarrollo local'}`);
  
  let mongoServer = null;
  
  try {
    // Configuraci√≥n espec√≠fica para CI/CD
    const options = {
      binary: {
        version: '6.0.1',
        checkMD5: false,
      },
      instance: {
        dbName: 'test-check',
        port: 27018, // Puerto diferente para no interferir
      },
    };
    
    console.log('‚öôÔ∏è Opciones de MongoDB Memory Server:', JSON.stringify(options, null, 2));
    
    // Intentar crear instancia
    console.log('üöÄ Creando instancia de MongoDB Memory Server...');
    mongoServer = await MongoMemoryServer.create(options);
    
    const uri = mongoServer.getUri();
    console.log('‚úÖ MongoDB Memory Server iniciado correctamente');
    console.log(`üìç URI: ${uri}`);
    
    // Verificar conexi√≥n b√°sica
    const { MongoClient } = require('mongodb');
    const client = new MongoClient(uri);
    
    await client.connect();
    console.log('‚úÖ Conexi√≥n a MongoDB Memory Server exitosa');
    
    const db = client.db('test-check');
    const collection = db.collection('test');
    
    // Test b√°sico de inserci√≥n/consulta
    await collection.insertOne({ test: 'data', timestamp: new Date() });
    const result = await collection.findOne({ test: 'data' });
    
    if (result) {
      console.log('‚úÖ Operaciones de base de datos funcionando correctamente');
    } else {
      throw new Error('No se pudo recuperar el documento insertado');
    }
    
    await client.close();
    
    console.log('üéâ MongoDB Memory Server est√° funcionando correctamente!');
    
  } catch (error) {
    console.error('‚ùå Error en MongoDB Memory Server:');
    console.error('üìã Detalles del error:', error.message);
    
    if (error.message.includes('libcrypto.so.1.1')) {
      console.error('üîß SOLUCI√ìN: Falta la biblioteca libcrypto.so.1.1');
      console.error('   En Ubuntu/Debian, instalar con:');
      console.error('   sudo apt-get install libssl-dev libssl1.1');
    }
    
    if (error.message.includes('ENOENT') && error.message.includes('mongod')) {
      console.error('üîß SOLUCI√ìN: MongoDB binario no encontrado');
      console.error('   Verificar descarga de binarios de MongoDB Memory Server');
    }
    
    process.exit(1);
    
  } finally {
    // Limpiar recursos
    if (mongoServer) {
      try {
        await mongoServer.stop();
        console.log('üßπ MongoDB Memory Server detenido correctamente');
      } catch (cleanupError) {
        console.warn('‚ö†Ô∏è Error al detener MongoDB Memory Server:', cleanupError.message);
      }
    }
  }
}

// Ejecutar verificaci√≥n
checkMongoMemoryServer()
  .then(() => {
    console.log('‚úÖ Verificaci√≥n completada exitosamente');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Error durante la verificaci√≥n:', error.message);
    process.exit(1);
  });
