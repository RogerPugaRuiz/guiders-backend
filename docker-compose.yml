version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE}
    ports:
      - "${DATABASE_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - postgres-net

  postgres-test:
    image: postgres:15
    container_name: postgres-test
    restart: always
    environment:
      POSTGRES_USER: ${TEST_DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${TEST_DATABASE_PASSWORD:-postgres}
      POSTGRES_DB: ${TEST_DATABASE:-guiders_test}
    ports:
      - "${TEST_DATABASE_PORT:-5433}:5432"
    tmpfs:
      - /var/lib/postgresql/data:rw,noexec,nosuid,size=512m
    command: ["postgres", "-c", "fsync=off", "-c", "synchronous_commit=off", "-c", "full_page_writes=off"]
    networks:
      - postgres-net

  redis:
    image: redis:6
    container_name: redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    tmpfs:
      - /data:rw,noexec,nosuid,size=256m
    command: ["redis-server", "--save", "", "--appendonly", "no", "--maxmemory", "128mb", "--maxmemory-policy", "allkeys-lru"]
    networks:
      - redis-net

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE:-guiders}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - mongodb-net

  mongodb-test:
    image: mongo:7.0
    container_name: mongodb-test
    restart: always
    ports:
      - "${TEST_MONGODB_PORT:-27018}:27017"
    tmpfs:
      - /data/db:rw,noexec,nosuid,size=1024m
    command: ["mongod", "--storageEngine", "wiredTiger", "--wiredTigerCacheSizeGB", "0.25", "--noauth"]
    networks:
      - mongodb-net

  keycloak-postgres:
    image: postgres:14-alpine
    container_name: keycloak-postgres
    restart: always
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USERNAME:-keycloak}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME:-keycloak}
    ports:
      - "${KEYCLOAK_DB_PORT:-5434}:5432"
    volumes:
      - keycloak-postgres-data:/var/lib/postgresql/data
    networks:
      - keycloak-net

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    restart: always
    environment:
      # Configuración de la base de datos
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/${KEYCLOAK_DB_NAME:-keycloak}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USERNAME:-keycloak}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-keycloak}
      
      # Configuración del administrador
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin123}
      
      # Configuración de desarrollo
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      
      # Configuración adicional
      KC_LOG_LEVEL: ${KEYCLOAK_LOG_LEVEL:-INFO}
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
    command: ["start-dev"]
    depends_on:
      - keycloak-postgres
    networks:
      - keycloak-net
    volumes:
      - keycloak-data:/opt/keycloak/data

  # Servicios específicos para testing E2E
  test-services:
    profiles:
      - test
    image: alpine:latest
    container_name: test-services
    command: ["sh", "-c", "echo 'Test services ready' && tail -f /dev/null"]
    depends_on:
      - postgres-test
      - mongodb-test
      - redis
    networks:
      - postgres-net
      - mongodb-net
      - redis-net

volumes:
  pgdata:
  sqlite-data:
  redis-data:
  mongodb-data:
  keycloak-postgres-data:
  keycloak-data:

networks:
  postgres-net:
  redis-net:
  mongodb-net:
  keycloak-net:
